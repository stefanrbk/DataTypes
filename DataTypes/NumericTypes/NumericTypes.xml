<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NumericTypes</name>
    </assembly>
    <members>
        <member name="T:System.Half">
             <summary>
             Represents a half-precision floating point number.
             </summary>
             <remarks>
             Note:
                 Half is not fast enought and precision is also very bad,
                 so is should not be used for mathematical computation (use Single instead).
                 The main advantage of Half type is lower memory cost: two bytes per number.
                 Half is typically used in graphical applications.
            
             Note:
                 All functions, where is used conversion half->float/float->half,
                 are approx. ten times slower than float->double/double->float, i.e. ~3ns on 2GHz CPU.
            
             References:
                 - Code retrieved from http://sourceforge.net/p/csharp-half/code/HEAD/tree/ on 2015-12-04
                 - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
                 - IEEE 754 revision, link: http://grouper.ieee.org/groups/754/
             </remarks>
        </member>
        <member name="F:System.Half._value">
            <summary>
            Internal representation of the half-precision floating-point number.
            </summary>
        </member>
        <member name="M:System.Half.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <returns>The System.Half number equivalent to the number contained in value.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is
            System.Globalization.NumberStyles.Number.
            </param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified culture-specific format information.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific parsing information about value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified style and culture-specific format.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is
            System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific information about the format of value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style and provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not a number in a valid format, or represents a number less than System.Half.MinValue
            or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified style and culture-specific format. A return value indicates
            whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the permitted format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific parsing information about value.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than
            System.Half.MinValue or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style
            is the System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
        </member>
        <member name="M:System.Half.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified System.Object.
            </summary>
            <param name="obj">An System.Object or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater
            than value. -or- value is null.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a System.Half</exception>
        </member>
        <member name="M:System.Half.CompareTo(System.Half)">
            <summary>
            Compares this instance to a specified System.Half object.
            </summary>
            <param name="other">A System.Half object.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:System.Half.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Object
            represent the same type and value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if value is a System.Half and equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.Equals(System.Half)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Half object represent the same value.
            </summary>
            <param name="other">A System.Half object to compare to this instance.</param>
            <returns>true if value is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Half.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.Half.
            </summary>
            <returns>The enumerated constant (TypeCode)255.</returns>
        </member>
        <member name="M:System.Half.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the value of this instance.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:System.Half.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by provider.</returns>
        </member>
        <member name="M:System.Half.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by format and provider.</returns>
            <exception cref="T:System.FormatException">format is invalid.</exception>
        </member>
        <member name="M:System.Half.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
             <summary>
            
             </summary>
             <param name="destination"></param>
             <param name="charsWritten"></param>
             <param name="format"></param>
             <param name="provider"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.op_Inequality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are not equal.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 and half2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than another specified System.Half.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 is less than half1; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_LessThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than or equal to another specified System.Half.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 is less than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Equality(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether two instances of System.Half are equal.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 and half2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThan(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than another specified System.Half.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 is greater than half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than or equal to another specified System.Half.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>true if half1 is greater than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Byte">
            <summary>
            Converts a System.Half to an 8-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Char">
            <summary>
            Converts a System.Half to a Unicode character.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A Unicode character that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Decimal">
            <summary>
            Converts a System.Half to a decimal number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A decimal number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Single)~System.Half">
            <summary>
            Converts a single-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>A System.Half that represents the converted single-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Double)~System.Half">
            <summary>
            Converts a double-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>A System.Half that represents the converted double-precision floating point number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Decimal)~System.Half">
            <summary>
            Converts a decimal number to a System.Half.
            </summary>
            <param name="value">decimal number</param>
            <returns>A System.Half that represents the converted decimal number.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int32">
            <summary>
            Converts a System.Half to a 32-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int64">
            <summary>
            Converts a System.Half to a 64-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.SByte">
            <summary>
            Converts a System.Half to an 8-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.Int16">
            <summary>
            Converts a System.Half to a 16-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt32">
            <summary>
            Converts a System.Half to a 32-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt64">
            <summary>
            Converts a System.Half to a 64-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Explicit(System.Half)~System.UInt16">
            <summary>
            Converts a System.Half to a 16-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Double">
            <summary>
            Converts a System.Half to a double-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A double-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Half)~System.Single">
            <summary>
            Converts a System.Half to a single-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A single-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Byte)~System.Half">
            <summary>
            Converts an 8-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 8-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.SByte)~System.Half">
            <summary>
            Converts an 8-bit signed integer to a System.Half.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>A System.Half that represents the converted 8-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Char)~System.Half">
            <summary>
            Converts a Unicode character to a System.Half.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>A System.Half that represents the converted Unicode character.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int16)~System.Half">
            <summary>
            Converts a 16-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>A System.Half that represents the converted 16-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt16)~System.Half">
            <summary>
            Converts a 16-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int32)~System.Half">
            <summary>
            Converts a 32-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>A System.Half that represents the converted 32-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt32)~System.Half">
            <summary>
            Converts a 32-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.Int64)~System.Half">
            <summary>
            Converts a 64-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>A System.Half that represents the converted 64-bit signed integer.</returns>
        </member>
        <member name="M:System.Half.op_Implicit(System.UInt64)~System.Half">
            <summary>
            Converts a 64-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:System.Half.op_Exponent(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.op_UnaryNegation(System.Half)">
            <summary>
            Negates the value of the specified System.Half operand.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The result of half multiplied by negative one (-1).</returns>
        </member>
        <member name="M:System.Half.op_Subtraction(System.Half,System.Half)">
            <summary>
            Subtracts two specified System.Half values.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>The System.Half result of subtracting half1 and half2.</returns>
        </member>
        <member name="M:System.Half.op_Decrement(System.Half)">
            <summary>
            Decrements the System.Half operand by one.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half decremented by 1.</returns>
        </member>
        <member name="M:System.Half.op_Modulus(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.op_Multiply(System.Half,System.Half)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>The System.Half result of multiplying half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_Division(System.Half,System.Half)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="left">A System.Half (the dividend).</param>
            <param name="right">A System.Half (the divisor).</param>
            <returns>The System.Half result of half1 by half2.</returns>
        </member>
        <member name="M:System.Half.op_UnaryPlus(System.Half)">
            <summary>
            Returns the value of the System.Half operand (the sign of the operand is unchanged).
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of the operand, half.</returns>
        </member>
        <member name="M:System.Half.op_Addition(System.Half,System.Half)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="left">A System.Half.</param>
            <param name="right">A System.Half.</param>
            <returns>The System.Half result of adding half1 and half2.</returns>
        </member>
        <member name="M:System.Half.op_Increment(System.Half)">
            <summary>
            Increments the System.Half operand by 1.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half incremented by 1.</returns>
        </member>
        <member name="P:System.Half.Epsilon">
            <summary>
            Represents the smallest positive System.Half value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.MaxValue">
            <summary>
            Represents the largest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.MinValue">
            <summary>
            Represents the smallest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.NaN">
            <summary>
            Represents not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="P:System.Half.SizeOf">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Half.GetBytes(System.Half)">
            <summary>
            Returns the specified half-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.Half.IsFinite(System.Half)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.IsInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity or System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsNaN(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to not a number (System.Half.NaN).
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if value evaluates to not a number (System.Half.NaN); otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsNegative(System.Half)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.IsNegativeInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsNormal(System.Half)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.IsPositiveInfinity(System.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:System.Half.IsSubnormal(System.Half)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:System.Half.ToHalf(System.Byte[],System.Int32)">
            <summary>
            Returns a half-precision floating point number converted from two bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A half-precision floating point number formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentException">
            startIndex is greater than or equal to the length of value minus 1, and is
            less than or equal to the length of value minus 1.
            </exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="T:System.HalfExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.HalfExtensions.ReadHalf(System.IO.BinaryReader)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Write(System.IO.BinaryWriter,System.Half)">
             <summary>
            
             </summary>
             <param name="writer"></param>
             <param name="value"></param>
        </member>
        <member name="M:System.HalfExtensions.Write(System.IO.TextWriter,System.Half)">
             <summary>
            
             </summary>
             <param name="writer"></param>
             <param name="value"></param>
        </member>
        <member name="M:System.HalfExtensions.WriteLine(System.IO.TextWriter,System.Half)">
             <summary>
            
             </summary>
             <param name="writer"></param>
             <param name="value"></param>
        </member>
        <member name="M:System.HalfExtensions.Average(System.Collections.Generic.IEnumerable{System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Max(System.Collections.Generic.IEnumerable{System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Min(System.Collections.Generic.IEnumerable{System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Sum(System.Collections.Generic.IEnumerable{System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Half})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="M:System.HalfExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Half}})">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="selector"></param>
             <returns></returns>
        </member>
        <member name="T:System.HalfHelper">
            <summary>
            Helper class for Half conversions and some low level operations.
            This class is internally used in the Half class.
            </summary>
            <remarks>
            References:
                - Code retrieved from http://sourceforge.net/p/csharp-half/code/HEAD/tree/ on 2015-12-04
                - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
            </remarks>
        </member>
        <member name="T:System.MathH">
             <summary>
            
             </summary>
        </member>
        <member name="P:System.MathH.E">
             <summary>
            
             </summary>
        </member>
        <member name="P:System.MathH.PI">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.MathH.Abs(System.Half)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Acos(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Acosh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Asin(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Asinh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Atan(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Atan2(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Atanh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Cbrt(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Ceiling(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Cos(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Cosh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Exp(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Floor(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.IEEERemainder(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Log(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Log(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Log10(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Max(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Min(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Pow(System.Half,System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Round(System.Half,System.MidpointRounding)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Round(System.Half,System.Int32,System.MidpointRounding)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="digits"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Round(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Round(System.Half,System.Int32)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="digits"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Sign(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Sin(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Sinh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Sqrt(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Tan(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Tanh(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
        <member name="M:System.MathH.Truncate(System.Half)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <returns></returns>
        </member>
    </members>
</doc>
